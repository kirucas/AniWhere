<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">
		
	<security:http auto-config="true" use-expressions="true">
		<security:intercept-url pattern="/**" access="permitAll" />
		<security:intercept-url pattern="/security/**" access="hasRole('USER')" />
		
		
		<security:form-login 
    		    login-page="/login.aw"
                default-target-url="/signIn/security.aw"
                always-use-default-target="true" 
                authentication-failure-url="/signIn/securityMessage.aw?error=auth"
                login-processing-url="/signInProcess.aw"
                username-parameter="mem_id"
                password-parameter="mem_pw" />
		<security:logout logout-url="/signout.aw"
	            delete-cookies="true"
				invalidate-session="true"
				logout-success-url="/member/sign_up.aw"
	            />
    	<!--
		<security:csrf disabled="false"/> : CSRF(Cross Site Resquest Fosery) 공격을 방어하기 위한 설정
            	CSRF방어 설정시에는  사용자 정의 로그인 폼 사용시에 아래 hidden태그 필수
                	<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>
                               또한 로그아웃을 POST 방식으로 해야 한다. 
          			CSRF 방어를 사용하지 않도록 되어있다면 GET 방식으로도 처리가능하다
				예]
					<form:form action="<c:url value='/logout'/>" method="POST">
						<input type="submit" value="로그아웃" />
					</form:form>
 		-->
	    <security:csrf disabled="true"/><!--false로 설정한 경우 Top.jsp의 로그아웃 요청을 POST방식으로 변경해야 한다-->
	
		<security:session-management invalid-session-url="/signIn/securityMessage.aw?error=invalid" >
		
		<security:concurrency-control max-sessions="1" 
				error-if-maximum-exceeded="true"
		        expired-url="/signIn/securityMessage.aw?error=expired" />
		</security:session-management>
	</security:http>
	 
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
		
	<security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service 
			        data-source-ref="datasource"
			        role-prefix="ROLE_"
			        users-by-username-query=
			        		"select mem_id as username, mem_pw as password, enabled 
			        		from member m join member_security s on m.mem_no=s.mem_no 
			        		where mem_id = ?"
	 			    authorities-by-username-query=
	 			    		"select mem_id as username, authority 
	 			    		from member m join member_security s on m.mem_no=s.mem_no  
	 			    		where mem_id = ?"
	    		/>
		</security:authentication-provider>
	</security:authentication-manager>
</beans>

